import pandas as pd
from sklearn.base import BaseEstimator, TransformerMixin
from sklearn.feature_extraction.text import TfidfVectorizer


class TfidfTransformer(BaseEstimator, TransformerMixin):
  def __init__(self, tf_idf_vectorizer=None, tf_idf_all_column_names_train_keep=None):
    self.tf_idf_vectorizer = tf_idf_vectorizer
    self.tf_idf_all_column_names_train_keep = tf_idf_all_column_names_train_keep

  def transform(self, X, y=None):
    """ convert all categorical columns in dataframe in a limited number of new features with a term frequency generated by the TF-IDF algorithim. The number of new featues is currently set at 50.  

    Args:
        df (DataFrame): dataframe containing original dataset

    Returns:
        DataFrame: the modified dataframe
    """

    print('TfidfTransformer - transform')
    print('start:', X.shape)

    NO_FEATURES_TO_KEEP = 20 # 30

    df_string_single, categorical_cols = self.get_categorical_columns_as_single_column(X)

    if not isinstance(self.tf_idf_vectorizer, TfidfVectorizer): # check if TfidfVectorizer object exists
      # print('train')  
      self.tf_idf_vectorizer = TfidfVectorizer()
      tf_idf_matrix = self.tf_idf_vectorizer.fit_transform(df_string_single)

      terms = self.tf_idf_vectorizer.get_feature_names_out()
    
      df_new = pd.DataFrame(tf_idf_matrix.toarray(), columns=terms)

      tf_idf_all_column_names_train = df_new.mean().sort_values(ascending=False).keys()
      tf_idf_columns_to_drop = tf_idf_all_column_names_train[NO_FEATURES_TO_KEEP:]
      self.tf_idf_all_column_names_train_keep = tf_idf_all_column_names_train[:(NO_FEATURES_TO_KEEP-1)]

      print("train - tf_idf_all_column_names_train_keep:", len(self.tf_idf_all_column_names_train_keep))

      df_new = df_new.drop(tf_idf_columns_to_drop, axis=1)
      df_new = df_new.add_prefix('Tfidf', axis=1)

    else:
      # print('test', df.shape)  
      tf_idf_matrix = self.tf_idf_vectorizer.transform(df_string_single)

      terms = self.tf_idf_vectorizer.get_feature_names_out()
      df_new_test = pd.DataFrame(tf_idf_matrix.toarray(), columns=terms)

      df_new = pd.DataFrame(columns=self.tf_idf_all_column_names_train_keep)

      print("test - tf_idf_all_column_names_train_keep:", len(self.tf_idf_all_column_names_train_keep))

      for column_name in df_new.columns:
        if column_name in df_new_test.columns:
          df_new[column_name] = df_new_test[column_name]
        else:
          df_new[column_name] = 0.0

      df_new = df_new.add_prefix('Tfidf', axis=1)

    df_new = df_new.astype('float64')

    # drop old categorical features from df and replace with df_new
    df_2 = X.drop(categorical_cols, axis=1)
    df_2.columns = df_2.columns.str.replace(" ", "_").str.replace("[^\w]", "", regex=True)
    df_2 = df_2.reset_index(drop=True)

    X = pd.concat([df_2, df_new], axis=1) # need to verify that the merging of the columns is correct  

    print('TfIdfTransformer fit end: ', type(X), X.shape)    

    return X

  def fit(self, X, y=None):
    print('TfidfTransformer - fit')
    return self # do nothing

  def get_categorical_columns_as_single_column(self, df):
    """get contents of categorical columns and merge into a single column

    Args:
        df (DataFrame): dataframe containing categorical features

    Returns:
        DataFrame: single feature dataframe containing contents of all categorical features
        Panda Series: contains list of categorical features 
    """

    # get categorical columns and merge into a single column 
    categorical_cols = df.select_dtypes(include='O').keys()

    X_strings = df[categorical_cols].copy()

    # Define a custom function
    def custom_string(x):
      stop_words = ['nan', 'no', 'yes']
      list = x.to_list()

      output = ''
      for item in list:
        if isinstance(item, str):
          item = str(item).lower().strip()
          if item not in stop_words:
            output += item + ' '
      return output

    return X_strings.agg(custom_string, axis=1), categorical_cols